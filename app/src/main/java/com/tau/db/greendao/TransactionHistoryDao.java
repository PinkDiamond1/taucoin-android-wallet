package com.mofei.tau.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mofei.tau.transaction.TransactionHistory.TransactionStatusConverter;
import com.mofei.tau.transaction.TransactionStatus;
import com.mofei.tau.transaction.UTXORecord.BigIntegerConverter;
import java.math.BigInteger;

import com.mofei.tau.transaction.TransactionHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_HISTORY".
*/
public class TransactionHistoryDao extends AbstractDao<TransactionHistory, Long> {

    public static final String TABLENAME = "TRANSACTION_HISTORY";

    /**
     * Properties of entity TransactionHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TxId = new Property(1, String.class, "txId", false, "TX_ID");
        public final static Property SentOrReceived = new Property(2, String.class, "sentOrReceived", false, "SENT_OR_RECEIVED");
        public final static Property FromAddress = new Property(3, String.class, "fromAddress", false, "FROM_ADDRESS");
        public final static Property ToAddress = new Property(4, String.class, "toAddress", false, "TO_ADDRESS");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
        public final static Property Value = new Property(6, String.class, "value", false, "VALUE");
        public final static Property Status = new Property(7, String.class, "status", false, "STATUS");
    }

    private final BigIntegerConverter valueConverter = new BigIntegerConverter();
    private final TransactionStatusConverter statusConverter = new TransactionStatusConverter();

    public TransactionHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TX_ID\" TEXT," + // 1: txId
                "\"SENT_OR_RECEIVED\" TEXT," + // 2: sentOrReceived
                "\"FROM_ADDRESS\" TEXT," + // 3: fromAddress
                "\"TO_ADDRESS\" TEXT," + // 4: toAddress
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"VALUE\" TEXT," + // 6: value
                "\"STATUS\" TEXT);"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(2, txId);
        }
 
        String sentOrReceived = entity.getSentOrReceived();
        if (sentOrReceived != null) {
            stmt.bindString(3, sentOrReceived);
        }
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(4, fromAddress);
        }
 
        String toAddress = entity.getToAddress();
        if (toAddress != null) {
            stmt.bindString(5, toAddress);
        }
        stmt.bindLong(6, entity.getTime());
 
        BigInteger value = entity.getValue();
        if (value != null) {
            stmt.bindString(7, valueConverter.convertToDatabaseValue(value));
        }
 
        TransactionStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, statusConverter.convertToDatabaseValue(status));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(2, txId);
        }
 
        String sentOrReceived = entity.getSentOrReceived();
        if (sentOrReceived != null) {
            stmt.bindString(3, sentOrReceived);
        }
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(4, fromAddress);
        }
 
        String toAddress = entity.getToAddress();
        if (toAddress != null) {
            stmt.bindString(5, toAddress);
        }
        stmt.bindLong(6, entity.getTime());
 
        BigInteger value = entity.getValue();
        if (value != null) {
            stmt.bindString(7, valueConverter.convertToDatabaseValue(value));
        }
 
        TransactionStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, statusConverter.convertToDatabaseValue(status));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionHistory readEntity(Cursor cursor, int offset) {
        TransactionHistory entity = new TransactionHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // txId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sentOrReceived
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // toAddress
            cursor.getLong(offset + 5), // time
            cursor.isNull(offset + 6) ? null : valueConverter.convertToEntityProperty(cursor.getString(offset + 6)), // value
            cursor.isNull(offset + 7) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 7)) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTxId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSentOrReceived(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setToAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
        entity.setValue(cursor.isNull(offset + 6) ? null : valueConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setStatus(cursor.isNull(offset + 7) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
