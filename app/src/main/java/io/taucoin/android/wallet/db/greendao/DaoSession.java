package io.taucoin.android.wallet.db.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import io.taucoin.android.wallet.db.entity.Accounts;
import io.taucoin.android.wallet.db.entity.UTXORecord;
import io.taucoin.android.wallet.db.entity.User;
import io.taucoin.android.wallet.db.entity.TransactionHistory;
import io.taucoin.android.wallet.db.entity.Key;
import io.taucoin.android.wallet.db.entity.KeyValue;
import io.taucoin.android.wallet.db.entity.KeyStore;

import io.taucoin.android.wallet.db.greendao.AccountsDao;
import io.taucoin.android.wallet.db.greendao.UTXORecordDao;
import io.taucoin.android.wallet.db.greendao.UserDao;
import io.taucoin.android.wallet.db.greendao.TransactionHistoryDao;
import io.taucoin.android.wallet.db.greendao.KeyDao;
import io.taucoin.android.wallet.db.greendao.KeyValueDao;
import io.taucoin.android.wallet.db.greendao.KeyStoreDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig accountsDaoConfig;
    private final DaoConfig uTXORecordDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig transactionHistoryDaoConfig;
    private final DaoConfig keyDaoConfig;
    private final DaoConfig keyValueDaoConfig;
    private final DaoConfig keyStoreDaoConfig;

    private final AccountsDao accountsDao;
    private final UTXORecordDao uTXORecordDao;
    private final UserDao userDao;
    private final TransactionHistoryDao transactionHistoryDao;
    private final KeyDao keyDao;
    private final KeyValueDao keyValueDao;
    private final KeyStoreDao keyStoreDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        accountsDaoConfig = daoConfigMap.get(AccountsDao.class).clone();
        accountsDaoConfig.initIdentityScope(type);

        uTXORecordDaoConfig = daoConfigMap.get(UTXORecordDao.class).clone();
        uTXORecordDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        transactionHistoryDaoConfig = daoConfigMap.get(TransactionHistoryDao.class).clone();
        transactionHistoryDaoConfig.initIdentityScope(type);

        keyDaoConfig = daoConfigMap.get(KeyDao.class).clone();
        keyDaoConfig.initIdentityScope(type);

        keyValueDaoConfig = daoConfigMap.get(KeyValueDao.class).clone();
        keyValueDaoConfig.initIdentityScope(type);

        keyStoreDaoConfig = daoConfigMap.get(KeyStoreDao.class).clone();
        keyStoreDaoConfig.initIdentityScope(type);

        accountsDao = new AccountsDao(accountsDaoConfig, this);
        uTXORecordDao = new UTXORecordDao(uTXORecordDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        transactionHistoryDao = new TransactionHistoryDao(transactionHistoryDaoConfig, this);
        keyDao = new KeyDao(keyDaoConfig, this);
        keyValueDao = new KeyValueDao(keyValueDaoConfig, this);
        keyStoreDao = new KeyStoreDao(keyStoreDaoConfig, this);

        registerDao(Accounts.class, accountsDao);
        registerDao(UTXORecord.class, uTXORecordDao);
        registerDao(User.class, userDao);
        registerDao(TransactionHistory.class, transactionHistoryDao);
        registerDao(Key.class, keyDao);
        registerDao(KeyValue.class, keyValueDao);
        registerDao(KeyStore.class, keyStoreDao);
    }
    
    public void clear() {
        accountsDaoConfig.clearIdentityScope();
        uTXORecordDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        transactionHistoryDaoConfig.clearIdentityScope();
        keyDaoConfig.clearIdentityScope();
        keyValueDaoConfig.clearIdentityScope();
        keyStoreDaoConfig.clearIdentityScope();
    }

    public AccountsDao getAccountsDao() {
        return accountsDao;
    }

    public UTXORecordDao getUTXORecordDao() {
        return uTXORecordDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public TransactionHistoryDao getTransactionHistoryDao() {
        return transactionHistoryDao;
    }

    public KeyDao getKeyDao() {
        return keyDao;
    }

    public KeyValueDao getKeyValueDao() {
        return keyValueDao;
    }

    public KeyStoreDao getKeyStoreDao() {
        return keyStoreDao;
    }

}
